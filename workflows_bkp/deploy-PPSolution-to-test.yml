name: Deploy To Test Environment

on:
 repository_dispatch:
   types: [depoy_to_test]

jobs:
  build:

    env:
     SolutionName: ${{ github.event.client_payload.solutionname }}
     branchName: ${{ github.event.client_payload.branch }}
     notes: ${{ github.event.client_payload.notes }}
     requestId: ${{ github.event.client_payload.requestid }}
     POWER_PLATFORM_ACTIONS_SECRET: ${{ secrets.POWER_PLATFORM_ACTIONS_SECRET }}
     BUILD_ENV_CONNECTION_STRING: ${{ secrets.BUILD_ENV_CONNECTION_STRING }}
     DEV_ENV_CONNECTION_STRING: ${{ secrets.DEV_ENV_CONNECTION_STRING }}
     TEST_ENV_CONNECTION_STRING: ${{ secrets.TEST_ENV_CONNECTION_STRING }}
     projectId: ${{ github.event.client_payload.projectid }}


    runs-on: windows-2019

    steps:
    - name: 'clone this repo'
      uses: actions/checkout@v2-beta
      with:
        ref: 'refs/heads/${{ env.branchName }}'

    - name: 'Power ALM Export action Checkout'
      uses: actions/checkout@v2-beta
      with:
        repository: poweralm/export
        ref: refs/heads/master
        token: ${{ env.POWER_PLATFORM_ACTIONS_SECRET }}
        path: .github/export

    - name: 'Power ALM Import action Checkout'
      uses: actions/checkout@v2-beta
      with:
        repository: poweralm/import
        ref: refs/heads/master
        token: ${{ env.POWER_PLATFORM_ACTIONS_SECRET }}
        path: .github/import

    - name: 'Power ALM Pack Checkout'
      uses: actions/checkout@v2-beta
      with:
        repository: poweralm/pack
        ref: refs/heads/master
        token: ${{ env.POWER_PLATFORM_ACTIONS_SECRET }}
        path: .github/pack

    - name: 'Power ALM Unpack Checkout'
      uses: actions/checkout@v2-beta
      with:
        repository: poweralm/unpack
        ref: refs/heads/master
        token: ${{ env.POWER_PLATFORM_ACTIONS_SECRET }}
        path: .github/unpack

    - name: 'Export the Power Solution from Dev Environment'
      id: export-dev
      uses: ./.github/export
      with:
        connectionString: '${{ env.DEV_ENV_CONNECTION_STRING }}'
        solutionName: ${{env.SolutionName}}
        ExportSolutionOutputPath: 'exported_unmanaged'
        packageType: 'Unmanaged'
    
    - name: 'Unpack the power solution'
      id: unpack-dev
      uses: ./.github/unpack
      with:
        UnpackedFilesFolder: ${{env.SolutionName}}
        SolutionName: ${{env.SolutionName}}
        solutionFile: 'exported_unmanaged\${{env.SolutionName}}.zip'

    - name: "commit the unpacked solution to the branch"
      run: |
        $SolutionName= echo ${{env.SolutionName}}
        $branchName = echo ${{ env.branchName }}
        $commitMessage = echo "${{env.notes}}"
        if ($null -eq $commitMessage -or $commitMessage -eq "") {
          $commitMessage = "Committing unpacked solution"
        }
        git fetch 
        git config --global user.name 'Admin'
        git config --global user.email 'Admin@users.noreply.github.com'
        echo "Fetch done"
        git add --all $SolutionName/**
        echo "Add done"
        git status -v 
        echo "Status done"
        git commit -m $commitMessage
        echo "Commit done"
        git push --force 
        echo "Push Done"
        Write-Host "There's an issue in windows : the git doesn't exit cleanly. Hence exit code 1."
      continue-on-error: true

    - name: 'Pack the Solution'
      id: pack-dev
      uses: ./.github/pack
      with:
        PackageType: 'Unmanaged'
        unpackedFilesFolder: ${{env.SolutionName}}
        OutputPath: 'packed'

    - name: 'Import the solution to Build Environment'
      id: import-build
      uses: ./.github/import
      with:
        ConnectionString: '${{ env.BUILD_ENV_CONNECTION_STRING }}'
        SolutionFile: 'packed\${{ env.SolutionName }}.zip'

    - name: 'Export the solution as managed from build Environment'
      id: export-build
      uses: ./.github/export
      with:
        connectionString: '${{ env.BUILD_ENV_CONNECTION_STRING }}'
        solutionName: ${{env.SolutionName}}
        packageType: 'Managed'
        ExportSolutionOutputPath: 'exported_managed'

    - name: 'Import the managed solution to the Test Environment'
      id: import-uat
      uses: ./.github/import
      with:
        ConnectionString: '${{ env.TEST_ENV_CONNECTION_STRING }}'
        SolutionFile: 'exported_managed\${{env.SolutionName}}_managed.zip'

    - name: 'Upload the managed solution to artifact'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.SolutionName}}
        path: 'exported_managed\${{env.SolutionName}}_managed.zip'

    - name: Set job status
      if: always()
      run: |
        $exportDev = echo "${{ steps.export-dev.outputs.errorMessage }}"
        $unpackDev = echo "${{ steps.unpack-dev.outputs.errorMessage }}"
        $packDev = echo "${{ steps.pack-dev.outputs.errorMessage }}"
        $importBuild = echo "${{ steps.import-build.outputs.errorMessage }}"
        $exportBuild = echo "${{ steps.export-build.outputs.errorMessage }}"
        $importUat = echo "${{ steps.import-uat.outputs.errorMessage }}"
        $errors = @{
          'ExportAction-Dev'="$exportDev";
          'UnpackAction-Dev'="$unpackDev";
          'PackAction-Dev'="$packDev";
          'ImportAction-Build'="$importBuild";
          'ExportAction-Build'="$exportBuild";
          'ImportAction-Test'="$importUat";
        }
        $jobStatus = echo ${{ job.status }}
        $workflow = echo ${{ github.workflow }}
        $branch = echo ${{ env.branchName }}
        $repo = echo ${{ github.repository }}
        $run = echo ${{ github.run_id }}
        $requestId = echo ${{ env.requestId }}
        $projectid = echo "${{ env.projectId }}"
        $status = @{
          'status' = $jobStatus;
          'workflow' = "$workflow";
          'branch' = $branch;
          'repo' = $repo;
          'run' = $run;
          'requestid' = $requestId;
          'projectid' = "$projectid";
          'errors'= $errors
        }
        $jsonString = ConvertTo-Json -InputObject $status
        $jsonString > status.json

    - name: Update job status
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: job_status
        path: status.json

  notify:
    needs: [build]
    if: always()
    runs-on: windows-latest
    steps:

    - name: Download artifact job_status
      uses: actions/download-artifact@v1
      with:
        name: job_status
      continue-on-error: true

    - name: Reading status & Invoking the webhook
      if: always()
      run: |
        $fileExists = Test-Path job_status/status.json -PathType Leaf
        $uri = echo '${{ github.event.client_payload.webhookurl }}'
        $jsonData = ''
        if ($fileExists) {
          $jsonData = Get-Content job_status/status.json
          echo "Data read from status file :: " $jsonData
        } else {
          $workflow = echo ${{ github.workflow }}
          $branch = echo ${{ github.event.client_payload.branch }}
          $repo = echo ${{ github.repository }}
          $run = echo ${{ github.run_id }}
          $requestId = echo ${{ github.event.client_payload.requestid }}
          $projectid = echo "${{ github.event.client_payload.projectid }}"
          $errors = @{
            "Actions"="Unable to get the status file from the previous job"
          }
          $status = @{
            'status' = "$fileExists";
            'workflow' = "$workflow";
            'branch' = $branch;
            'repo' = $repo;
            'run' = $run;
            'requestid' = $requestId;
            'projectid' = "$projectid";
            'errors' = $errors
          }
          $jsonData = ConvertTo-Json -InputObject $status
          echo "Data constructed as status.json file is not present :: " $jsonData
        }
        echo "Invoking the WebHook Url"
        Invoke-RestMethod -Uri $uri -Body $jsonData  -Method POST -ContentType 'application/json'
        echo "Invoked the WebHook Url"
